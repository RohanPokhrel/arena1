rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    match /usernames/{username} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if true; // Temporarily allow write for setup
    }
    
    match /users/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin()) &&
        // Validate balance fields are numbers if they exist
        (!request.resource.data.keys().hasAny(['balance', 'totalDeposited', 'totalWithdrawn']) ||
        (
          request.resource.data.balance is number &&
          request.resource.data.totalDeposited is number &&
          request.resource.data.totalWithdrawn is number &&
          // Add validation for reasonable amounts
          request.resource.data.balance >= 0 &&
          // Optional: Add validation for reasonable deposit/withdrawal limits
          request.resource.data.totalDeposited >= 0 &&
          request.resource.data.totalWithdrawn >= 0
        ));
    }

    match /transactions/{transactionId} {
      allow read, write, delete: if isAdmin();
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }

    match /withdrawalRequests/{requestId} {
      // Allow admins full access
      allow read, write: if isAdmin();
      // Allow users to create and read their own requests
      allow create: if request.auth != null;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}